:- module (json.json_lexer).
:- use_module array, array2d, assoc_list, bag, bimap, bitmap, bool, builtin, calendar, char, cord, digraph, float, int, integer, io, list, map, maybe, mutvar, pair, pqueue, private_builtin, queue, rational, rbtree, require, set_bbbtree, set_ctree234, set_ordlist, set_tree234, set_unordlist, stream, string, unit, univ, version_array, (json.char_buffer), (json.json_lexer), (json.json_parser), (json.marshal), (json.pointer), (json.string_reader), (json.unmarshal), (json.writer), (string.builder).
:- type json.json_lexer.last_multiline_comment_char
	--->	char_star 
	;	char_other .
:- type json.json_lexer.frac_where
	--->	frac_start 
	;	frac_digit .
:- type json.json_lexer.exp_where
	--->	exp_start 
	;	exp_sign 
	;	exp_digit .
:- type json.json_lexer.code_point_class
	--->	code_point_valid 
	;	code_point_invalid 
	;	code_point_leading_surrogate 
	;	code_point_trailing_surrogate 
	;	code_point_null_char .
:- pred (json.json_lexer).do_char_escape(character, list.list(character), list.list(character)).
:- mode (json.json_lexer).do_char_escape((builtin.in), (builtin.in), (builtin.out)) is det.
(json.json_lexer).escape_json_string(String_3) = EscapedString_4 :-
    V_6 = (json.json_lexer).do_char_escape : pred(character, list.list(character), list.list(character)),
    V_7 = list.[] : list.list(character),
    string.foldl(V_6, String_3, V_7, RevChars_5),
    EscapedString_4 = string.from_rev_char_list(RevChars_5).
