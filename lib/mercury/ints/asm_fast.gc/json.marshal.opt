:- module (json.marshal).
:- use_module array, array2d, assoc_list, bag, bimap, bitmap, bool, builtin, calendar, char, cord, digraph, exception, float, int, integer, io, list, map, maybe, mutvar, pair, pqueue, private_builtin, queue, rational, rbtree, require, set_bbbtree, set_ctree234, set_ordlist, set_tree234, set_unordlist, stream, string, unit, univ, version_array, (json.char_buffer), (json.json_lexer), (json.json_parser), (json.marshal), (json.pointer), (json.string_reader), (json.unmarshal), (json.writer), (string.builder).
:- pred (json.marshal).list_to_values(list.list(T_1), list.list(json.value), list.list(json.value)) <= (json.to_json(T_1)).
:- mode (json.marshal).list_to_values((builtin.in), (builtin.in), (builtin.out)) is det.
:- func (json.marshal).list_of_pairs_to_json(string, string, list.list(pair.pair(A_1, B_2))) = json.value <= (json.to_json(A_1), json.to_json(B_2)).
:- mode (json.marshal).list_of_pairs_to_json((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det.
:- pred (json.marshal).list_of_pairs_to_values(string, string, list.list(pair.pair(A_1, B_2)), list.list(json.value), list.list(json.value)) <= (json.to_json(A_1), json.to_json(B_2)).
:- mode (json.marshal).list_of_pairs_to_values((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
(json.marshal).int_to_json(Int_3) = json.number(V_4) :-
    V_4 = float.float(Int_3).
(json.marshal).string_to_json(String_3) = json.string(String_3).
(json.marshal).char_to_json(Char_3) = json.string(V_4) :-
    V_4 = string.from_char(Char_3).
(json.marshal).bool_to_json(Bool_3) = json.bool(Bool_3).
(json.marshal).date_time_to_json(DateTime_3) = json.string(V_4) :-
    V_4 = calendar.date_to_string(DateTime_3).
(json.marshal).duration_to_json(Duration_3) = json.string(V_4) :-
    V_4 = calendar.duration_to_string(Duration_3).
(json.marshal).list_to_json(List_3) = Value_4 :-
    V_7 = list.[] : list.list(json.value),
    (json.marshal).list_to_values(List_3, V_7, RevValues_5),
    list.reverse(RevValues_5, Values_6),
    Value_4 = json.array(Values_6) : json.value.
(json.marshal).cord_to_json(Cord_3) = Result_4 :-
    List_5 = cord.list(Cord_3),
    Result_4 = (json.marshal).list_to_json(List_5).
(json.marshal).bitmap_to_json(Bitmap_3) = Value_4 :-
    String_5 = bitmap.to_string(Bitmap_3),
    Value_4 = json.string(String_5) : json.value.
(json.marshal).set_ordlist_to_json(Set_3) = Result_4 :-
    set_ordlist.to_sorted_list(Set_3, List_5),
    Result_4 = (json.marshal).list_to_json(List_5).
(json.marshal).set_unordlist_to_json(Set_3) = Result_4 :-
    set_unordlist.to_sorted_list(Set_3, List_5),
    Result_4 = (json.marshal).list_to_json(List_5).
(json.marshal).set_tree234_to_json(Set_3) = Result_4 :-
    set_tree234.to_sorted_list(Set_3, List_5),
    Result_4 = (json.marshal).list_to_json(List_5).
(json.marshal).set_ctree234_to_json(Set_3) = Result_4 :-
    List_5 = set_ctree234.to_sorted_list(Set_3),
    Result_4 = (json.marshal).list_to_json(List_5).
(json.marshal).set_bbbtree_to_json(Set_3) = Result_4 :-
    set_bbbtree.to_sorted_list(Set_3, List_5),
    Result_4 = (json.marshal).list_to_json(List_5).
(json.marshal).map_to_json(Map_3) = Value_4 :-
    map.to_assoc_list(Map_3, KVs_5),
    Value_4 = (json.marshal).list_of_pairs_to_json(V_6, V_7, KVs_5),
    V_6 = "key" : string,
    V_7 = "value" : string.
(json.marshal).rbtree_to_json(Tree_3) = Value_4 :-
    rbtree.rbtree_to_assoc_list(Tree_3, KVs_5),
    Value_4 = (json.marshal).list_of_pairs_to_json(V_6, V_7, KVs_5),
    V_6 = "key" : string,
    V_7 = "value" : string.
(json.marshal).bimap_to_json(Bimap_3) = Value_4 :-
    bimap.to_assoc_list(Bimap_3, KVs_5),
    Value_4 = (json.marshal).list_of_pairs_to_json(V_6, V_7, KVs_5),
    V_6 = "key" : string,
    V_7 = "value" : string.
(json.marshal).unit_to_json(_Unit_3) = json.string(V_4) :-
    V_4 = "unit" : string.
(json.marshal).queue_to_json(Queue_3) = Value_4 :-
    List_5 = queue.to_list(Queue_3),
    Value_4 = json.to_json(List_5).
(json.marshal).pqueue_to_json(PriorityQueue_3) = Value_4 :-
    KVs_5 = pqueue.to_assoc_list(PriorityQueue_3),
    Value_4 = (json.marshal).list_of_pairs_to_json(V_6, V_7, KVs_5),
    V_6 = "key" : string,
    V_7 = "value" : string.
(json.marshal).json_pointer_to_json(Pointer_3) = Value_4 :-
    PointerStr_5 = json.pointer_to_string(Pointer_3),
    Value_4 = json.string(PointerStr_5) : json.value.
(json.marshal).list_to_values(list.[], STATE_VARIABLE_Values_0_5, STATE_VARIABLE_Values_6) :-
    STATE_VARIABLE_Values_6 = STATE_VARIABLE_Values_0_5.
(json.marshal).list_to_values(list.[T_7 | Ts_8], STATE_VARIABLE_Values_0_11, STATE_VARIABLE_Values_12) :-
    Value_10 = json.to_json(T_7),
    STATE_VARIABLE_Values_13_13 = list.[Value_10 | STATE_VARIABLE_Values_0_11] : list.list(json.value),
    (json.marshal).list_to_values(Ts_8, STATE_VARIABLE_Values_13_13, STATE_VARIABLE_Values_12).
(json.marshal).list_of_pairs_to_json(FstName_5, SndName_6, ListPairs_7) = Value_8 :-
    V_11 = list.[] : list.list(json.value),
    (json.marshal).list_of_pairs_to_values(FstName_5, SndName_6, ListPairs_7, V_11, RevValues_9),
    list.reverse(RevValues_9, Values_10),
    Value_8 = json.array(Values_10) : json.value.
