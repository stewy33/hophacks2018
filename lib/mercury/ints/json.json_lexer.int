:- module (json.json_lexer).
:- interface.
:- type token(Error)
	--->	token_left_curly_bracket 
	;	token_right_curly_bracket 
	;	token_left_square_bracket 
	;	token_right_square_bracket 
	;	token_comma 
	;	token_colon 
	;	token_string(string)
	;	token_number(float)
	;	token_false 
	;	token_true 
	;	token_null 
	;	token_eof 
	;	token_error(json.error(Error)).
:- func escape_json_string(string) = string.
:- pred get_token(json.reader(Stream), json.json_lexer.token(Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode get_token((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- func token_to_string(json.json_lexer.token(Error)) = string.
