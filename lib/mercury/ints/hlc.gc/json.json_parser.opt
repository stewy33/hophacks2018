:- module (json.json_parser).
:- use_module array, array2d, assoc_list, bag, bimap, bitmap, bool, builtin, calendar, char, cord, digraph, float, int, integer, io, list, map, maybe, mutvar, pair, pqueue, private_builtin, queue, rational, rbtree, require, set_bbbtree, set_ctree234, set_ordlist, set_tree234, set_unordlist, stream, string, unit, univ, version_array, (json.char_buffer), (json.json_lexer), (json.json_parser), (json.marshal), (json.pointer), (json.string_reader), (json.unmarshal), (json.writer), (string.builder).
:- type json.json_parser.object_where
	--->	at_start 
	;	after_comma .
:- type json.json_parser.array_where
	--->	at_start 
	;	after_comma .
:- pred (json.json_parser).do_object_fold_members(json.reader(Stream_1), int, json.json_parser.object_where, pred(string, json.value, A_2, A_2), A_2, stream.maybe_partial_res(A_2, json.error(Error_3)), State_4, State_4) <= (stream.line_oriented(Stream_1, State_4), stream.putback(Stream_1, character, State_4, Error_3)).
:- mode (json.json_parser).do_object_fold_members((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode (json.json_parser).do_object_fold_members((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred (json.json_parser).do_object_fold_state_members(json.reader(Stream_1), int, json.json_parser.object_where, pred(string, json.value, A_2, A_2, State_3, State_3), A_2, stream.maybe_partial_res(A_2, json.error(Error_4)), State_3, State_3) <= (stream.line_oriented(Stream_1, State_3), stream.putback(Stream_1, character, State_3, Error_4)).
:- mode (json.json_parser).do_object_fold_state_members((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode (json.json_parser).do_object_fold_state_members((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred (json.json_parser).do_array_fold_elements(json.reader(Stream_1), int, json.json_parser.array_where, pred(json.value, A_2, A_2), A_2, stream.maybe_partial_res(A_2, json.error(Error_3)), State_4, State_4) <= (stream.line_oriented(Stream_1, State_4), stream.putback(Stream_1, character, State_4, Error_3)).
:- mode (json.json_parser).do_array_fold_elements((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode (json.json_parser).do_array_fold_elements((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred (json.json_parser).do_array_fold_state_elements(json.reader(Stream_1), int, json.json_parser.array_where, pred(json.value, A_2, A_2, State_3, State_3), A_2, stream.maybe_partial_res(A_2, json.error(Error_4)), State_3, State_3) <= (stream.line_oriented(Stream_1, State_3), stream.putback(Stream_1, character, State_3, Error_4)).
:- mode (json.json_parser).do_array_fold_state_elements((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode (json.json_parser).do_array_fold_state_elements((builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred (json.json_parser).below_nesting_depth_limit(json.reader(V_1), int).
:- mode (json.json_parser).below_nesting_depth_limit((builtin.in), (builtin.in)) is semidet.
(json.json_parser).do_object_fold(Reader_7, Pred_8, STATE_VARIABLE_Acc_0_21, Result_10, STATE_VARIABLE_State_0_22, STATE_VARIABLE_State_23) :-
    (json.json_lexer).get_token(Reader_7, Token_12, STATE_VARIABLE_State_0_22, STATE_VARIABLE_State_24_24),
    ( % disjunction
      Token_12 = (json.json_lexer).token_left_curly_bracket : json.json_lexer.token(Error_3),
      NestingDepth_13 = 1 : int,
      (if
        (json.json_parser).below_nesting_depth_limit(Reader_7, NestingDepth_13)
      then
        V_29 = (json.json_parser).at_start : json.json_parser.object_where,
        (json.json_parser).do_object_fold_members(Reader_7, NestingDepth_13, V_29, Pred_8, STATE_VARIABLE_Acc_0_21, Result_10, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23)
      else
        json.make_error_context(Reader_7, Context_14, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23),
        ErrorDesc_15 = json.maximum_nesting_depth_reached : json.error_desc,
        Error_16 = json.json_error(Context_14, ErrorDesc_15) : json.error(Error_3),
        Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_16) : stream.maybe_partial_res(A_2, json.error(Error_3))
      )
    ;
      ( % disjunction
        Token_12 = (json.json_lexer).token_right_curly_bracket : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_left_square_bracket : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_right_square_bracket : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_comma : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_colon : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_string(V_17) : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_number(V_18) : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_false : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_true : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_null : json.json_lexer.token(Error_3)
      ),
      Msg_19 = "expected \'{\'" : string,
      TokenDesc_20 = (json.json_lexer).token_to_string(Token_12),
      V_27 = maybe.yes(Msg_19) : maybe.maybe(string),
      json.make_syntax_error(Reader_7, TokenDesc_20, V_27, Error_32, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_32) : stream.maybe_partial_res(A_2, json.error(Error_3))
    ;
      Token_12 = (json.json_lexer).token_eof : json.json_lexer.token(Error_3),
      V_25 = maybe.no : maybe.maybe(string),
      json.make_unexpected_eof_error(Reader_7, V_25, Error_33, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_33) : stream.maybe_partial_res(A_2, json.error(Error_3))
    ;
      Token_12 = (json.json_lexer).token_error(Error_34) : json.json_lexer.token(Error_3),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_34) : stream.maybe_partial_res(A_2, json.error(Error_3)),
      STATE_VARIABLE_State_23 = STATE_VARIABLE_State_24_24
    ).
(json.json_parser).do_object_fold_state(Reader_7, Pred_8, STATE_VARIABLE_Acc_0_19, Result_10, STATE_VARIABLE_State_0_20, STATE_VARIABLE_State_21) :-
    (json.json_lexer).get_token(Reader_7, Token_12, STATE_VARIABLE_State_0_20, STATE_VARIABLE_State_22_22),
    ( % disjunction
      Token_12 = (json.json_lexer).token_left_curly_bracket : json.json_lexer.token(Error_4),
      NestingDepth_13 = 1 : int,
      V_27 = (json.json_parser).at_start : json.json_parser.object_where,
      (json.json_parser).do_object_fold_state_members(Reader_7, NestingDepth_13, V_27, Pred_8, STATE_VARIABLE_Acc_0_19, Result_10, STATE_VARIABLE_State_22_22, STATE_VARIABLE_State_21)
    ;
      ( % disjunction
        Token_12 = (json.json_lexer).token_right_curly_bracket : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_left_square_bracket : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_right_square_bracket : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_comma : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_colon : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_string(V_14) : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_number(V_15) : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_false : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_true : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_null : json.json_lexer.token(Error_4)
      ),
      Msg_16 = "expected \'{\'" : string,
      TokenDesc_17 = (json.json_lexer).token_to_string(Token_12),
      V_25 = maybe.yes(Msg_16) : maybe.maybe(string),
      json.make_syntax_error(Reader_7, TokenDesc_17, V_25, Error_18, STATE_VARIABLE_State_22_22, STATE_VARIABLE_State_21),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_19, Error_18) : stream.maybe_partial_res(A_2, json.error(Error_4))
    ;
      Token_12 = (json.json_lexer).token_eof : json.json_lexer.token(Error_4),
      V_23 = maybe.no : maybe.maybe(string),
      json.make_unexpected_eof_error(Reader_7, V_23, Error_29, STATE_VARIABLE_State_22_22, STATE_VARIABLE_State_21),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_19, Error_29) : stream.maybe_partial_res(A_2, json.error(Error_4))
    ;
      Token_12 = (json.json_lexer).token_error(Error_30) : json.json_lexer.token(Error_4),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_19, Error_30) : stream.maybe_partial_res(A_2, json.error(Error_4)),
      STATE_VARIABLE_State_21 = STATE_VARIABLE_State_22_22
    ).
(json.json_parser).do_array_fold(Reader_7, Pred_8, STATE_VARIABLE_Acc_0_21, Result_10, STATE_VARIABLE_State_0_22, STATE_VARIABLE_State_23) :-
    (json.json_lexer).get_token(Reader_7, Token_12, STATE_VARIABLE_State_0_22, STATE_VARIABLE_State_24_24),
    ( % disjunction
      Token_12 = (json.json_lexer).token_left_square_bracket : json.json_lexer.token(Error_3),
      NestingDepth_13 = 1 : int,
      (if
        (json.json_parser).below_nesting_depth_limit(Reader_7, NestingDepth_13)
      then
        V_29 = (json.json_parser).at_start : json.json_parser.array_where,
        (json.json_parser).do_array_fold_elements(Reader_7, NestingDepth_13, V_29, Pred_8, STATE_VARIABLE_Acc_0_21, Result_10, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23)
      else
        json.make_error_context(Reader_7, Context_14, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23),
        ErrorDesc_15 = json.maximum_nesting_depth_reached : json.error_desc,
        Error_16 = json.json_error(Context_14, ErrorDesc_15) : json.error(Error_3),
        Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_16) : stream.maybe_partial_res(A_2, json.error(Error_3))
      )
    ;
      ( % disjunction
        Token_12 = (json.json_lexer).token_right_curly_bracket : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_left_curly_bracket : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_right_square_bracket : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_comma : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_colon : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_string(V_17) : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_number(V_18) : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_false : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_true : json.json_lexer.token(Error_3)
      ;
        Token_12 = (json.json_lexer).token_null : json.json_lexer.token(Error_3)
      ),
      Msg_19 = "expected \'[\'" : string,
      TokenDesc_20 = (json.json_lexer).token_to_string(Token_12),
      V_27 = maybe.yes(Msg_19) : maybe.maybe(string),
      json.make_syntax_error(Reader_7, TokenDesc_20, V_27, Error_32, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_32) : stream.maybe_partial_res(A_2, json.error(Error_3))
    ;
      Token_12 = (json.json_lexer).token_eof : json.json_lexer.token(Error_3),
      V_25 = maybe.no : maybe.maybe(string),
      json.make_unexpected_eof_error(Reader_7, V_25, Error_33, STATE_VARIABLE_State_24_24, STATE_VARIABLE_State_23),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_33) : stream.maybe_partial_res(A_2, json.error(Error_3))
    ;
      Token_12 = (json.json_lexer).token_error(Error_34) : json.json_lexer.token(Error_3),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_21, Error_34) : stream.maybe_partial_res(A_2, json.error(Error_3)),
      STATE_VARIABLE_State_23 = STATE_VARIABLE_State_24_24
    ).
(json.json_parser).do_array_fold_state(Reader_7, Pred_8, STATE_VARIABLE_Acc_0_19, Result_10, STATE_VARIABLE_State_0_20, STATE_VARIABLE_State_21) :-
    (json.json_lexer).get_token(Reader_7, Token_12, STATE_VARIABLE_State_0_20, STATE_VARIABLE_State_22_22),
    ( % disjunction
      Token_12 = (json.json_lexer).token_left_square_bracket : json.json_lexer.token(Error_4),
      NestingDepth_13 = 1 : int,
      V_27 = (json.json_parser).at_start : json.json_parser.array_where,
      (json.json_parser).do_array_fold_state_elements(Reader_7, NestingDepth_13, V_27, Pred_8, STATE_VARIABLE_Acc_0_19, Result_10, STATE_VARIABLE_State_22_22, STATE_VARIABLE_State_21)
    ;
      ( % disjunction
        Token_12 = (json.json_lexer).token_right_curly_bracket : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_left_curly_bracket : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_right_square_bracket : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_comma : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_colon : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_string(V_14) : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_number(V_15) : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_false : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_true : json.json_lexer.token(Error_4)
      ;
        Token_12 = (json.json_lexer).token_null : json.json_lexer.token(Error_4)
      ),
      Msg_16 = "expected \'[\'" : string,
      TokenDesc_17 = (json.json_lexer).token_to_string(Token_12),
      V_25 = maybe.yes(Msg_16) : maybe.maybe(string),
      json.make_syntax_error(Reader_7, TokenDesc_17, V_25, Error_18, STATE_VARIABLE_State_22_22, STATE_VARIABLE_State_21),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_19, Error_18) : stream.maybe_partial_res(A_2, json.error(Error_4))
    ;
      Token_12 = (json.json_lexer).token_eof : json.json_lexer.token(Error_4),
      V_23 = maybe.no : maybe.maybe(string),
      json.make_unexpected_eof_error(Reader_7, V_23, Error_29, STATE_VARIABLE_State_22_22, STATE_VARIABLE_State_21),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_19, Error_29) : stream.maybe_partial_res(A_2, json.error(Error_4))
    ;
      Token_12 = (json.json_lexer).token_error(Error_30) : json.json_lexer.token(Error_4),
      Result_10 = stream.error(STATE_VARIABLE_Acc_0_19, Error_30) : stream.maybe_partial_res(A_2, json.error(Error_4)),
      STATE_VARIABLE_State_21 = STATE_VARIABLE_State_22_22
    ).
