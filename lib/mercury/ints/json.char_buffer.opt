:- module (json.char_buffer).
:- use_module array, array2d, assoc_list, bag, bimap, bitmap, bool, builtin, calendar, char, cord, digraph, float, int, integer, io, list, map, maybe, mutvar, pair, pqueue, private_builtin, queue, rational, rbtree, require, set_bbbtree, set_ctree234, set_ordlist, set_tree234, set_unordlist, stream, string, unit, univ, version_array, (json.char_buffer), (json.json_lexer), (json.json_parser), (json.marshal), (json.pointer), (json.string_reader), (json.unmarshal), (json.writer), (string.builder).
:- type json.char_buffer.char_buffer_rep
	--->	char_buffer_rep(list.list(character), int).
:- type json.char_buffer.char_buffer
	--->	char_buffer(mutvar.mutvar(json.char_buffer.char_buffer_rep)).
:- pragma foreign_type(c, json.char_buffer.char_buffer, "MJSON_buffer *", [can_pass_as_mercury_type]).
:- pragma foreign_import_module("C", (json.char_buffer)).
:- pragma foreign_import_module("C", json).
:- pragma foreign_import_module("C#", json).
:- pragma foreign_import_module("Java", json).
:- pragma foreign_import_module("Erlang", json).
:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("IL", array).
:- pragma foreign_import_module("Erlang", array).
:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("IL", array).
:- pragma foreign_import_module("Erlang", array).
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("IL", bitmap).
:- pragma foreign_import_module("Erlang", bitmap).
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("IL", bitmap).
:- pragma foreign_import_module("Erlang", bitmap).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("IL", io).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("IL", io).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C#", mutvar).
:- pragma foreign_import_module("Java", mutvar).
:- pragma foreign_import_module("Erlang", mutvar).
:- pragma foreign_import_module("C#", mutvar).
:- pragma foreign_import_module("Java", mutvar).
:- pragma foreign_import_module("Erlang", mutvar).
:- pragma foreign_import_module("C", version_array).
:- pragma foreign_import_module("C#", version_array).
:- pragma foreign_import_module("Java", version_array).
:- pragma foreign_import_module("C", version_array).
:- pragma foreign_import_module("C#", version_array).
:- pragma foreign_import_module("Java", version_array).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C#", time).
:- pragma foreign_import_module("Java", time).
:- pragma foreign_import_module("IL", time).
:- pragma foreign_import_module("Erlang", time).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C#", time).
:- pragma foreign_import_module("Java", time).
:- pragma foreign_import_module("IL", time).
:- pragma foreign_import_module("Erlang", time).
:- pragma foreign_import_module("C#", rtti_implementation).
:- pragma foreign_import_module("Java", rtti_implementation).
:- pragma foreign_import_module("C#", rtti_implementation).
:- pragma foreign_import_module("Java", rtti_implementation).
:- pragma foreign_proc("C", (json.char_buffer).add(Buffer :: (builtin.in), Char :: (builtin.in), State0 :: (builtin.di), State :: (builtin.uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, will_not_modify_trail], "
    Buffer->last_char = Char;

    /*
    ** Check whether we need to resize the buffer.
    */
    if (Buffer->num_bytes >= Buffer->max_bytes - 5) {

        MR_String   new_contents;
        size_t      new_size;

        new_size = Buffer->max_bytes * 2;
        new_contents = MR_GC_realloc(Buffer->contents,
            sizeof(char) * new_size);

        Buffer->contents = new_contents;
        Buffer->max_bytes = new_size;

        #if defined(MJSON_DEBUG_BUFFER)
            fprintf(stderr,
                \"Extending char buffer to %d bytes\\n\", new_size);
        #endif
    }

    if (MR_is_ascii(Char)) {
        Buffer->contents[Buffer->num_bytes] = Char;
        Buffer->num_bytes++;
    } else {
        Buffer->num_bytes +=
            MR_utf8_encode(Buffer->contents + Buffer->num_bytes, Char);
    }
    State = State0;
").
:- pragma foreign_proc("C", (json.char_buffer).to_string(Buffer :: (builtin.in), _State :: (builtin.ui)) = (Str :: (builtin.out)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, will_not_modify_trail], "
    Buffer->contents[Buffer->num_bytes] = \'\\0\';
    MR_make_aligned_string_copy(Str, Buffer->contents);
").
:- pragma foreign_proc("C", (json.char_buffer).last(Buffer :: (builtin.in), Char :: (builtin.out), _State :: (builtin.ui)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, will_not_modify_trail], "
    if (Buffer->last_char > 0) {
        Char = Buffer->last_char;
        SUCCESS_INDICATOR = MR_TRUE;
    } else {
        SUCCESS_INDICATOR = MR_FALSE;
    }
").
:- pragma foreign_proc("C", (json.char_buffer).reset(Buffer :: (builtin.in), State0 :: (builtin.di), State :: (builtin.uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, will_not_modify_trail], "
    Buffer->last_char = 0;
    Buffer->num_bytes = 0;
    State = State0;
").
