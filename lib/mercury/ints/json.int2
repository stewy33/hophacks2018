:- module json.
:- interface.
:- import_module array.
:- import_module array2d.
:- import_module assoc_list.
:- import_module bag.
:- import_module bimap.
:- import_module bitmap.
:- import_module bool.
:- import_module calendar.
:- import_module char.
:- import_module cord.
:- import_module digraph.
:- import_module integer.
:- import_module io.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module pair.
:- import_module pqueue.
:- import_module queue.
:- import_module rational.
:- import_module rbtree.
:- import_module set_bbbtree.
:- import_module set_ctree234.
:- import_module set_ordlist.
:- import_module set_tree234.
:- import_module set_unordlist.
:- import_module stream.
:- import_module unit.
:- import_module version_array.
:- type allow_comments
	--->	allow_comments 
	;	do_not_allow_comments .
:- type allow_infinities
	--->	allow_infinities 
	;	do_not_allow_infinities .
:- type allow_repeated_members
	--->	do_not_allow_repeated_members 
	;	allow_repeated_members_keep_first 
	;	allow_repeated_members_keep_last .
:- type allow_trailing_commas
	--->	allow_trailing_commas 
	;	do_not_allow_trailing_commas .
:- type array == list.list(json.value).
:- type comment
	--->	comment_eol(string)
	;	comment_multiline(string).
:- type context
	--->	context((json.stream_name) :: string, (json.line_number) :: int, (json.column_number) :: int).
:- type error_desc
	--->	unexpected_eof(maybe.maybe(string))
	;	syntax_error(string, maybe.maybe(string))
	;	invalid_character_escape(char.char)
	;	unexpected_value(string, maybe.maybe(string))
	;	duplicate_object_member(string)
	;	unterminated_multiline_comment 
	;	invalid_unicode_character(string)
	;	unpaired_leading_utf16_surrogate(string)
	;	unpaired_trailing_utf16_surrogate(string)
	;	invalid_trailing_utf16_surrogate(string)
	;	null_character 
	;	unescaped_control_character(int)
	;	illegal_start_character(char.char)
	;	illegal_unicode_escape_character(char.char)
	;	non_finite_number(string)
	;	illegal_negation(char.char)
	;	illegal_comment_start(char.char)
	;	bad_signed_exponent(char.char, char.char)
	;	bad_exponent(char.char, char.char)
	;	expected_eof(string)
	;	maximum_nesting_depth_reached .
:- type from_string_result
	--->	ok(json.value)
	;	error(json.context, json.error_desc).
:- type maximum_nesting_depth
	--->	no_maximum_nesting_depth 
	;	maximum_nesting_depth(int).
:- type member_filter
	--->	no_member_filter 
	;	member_filter(pred(string, json.value)).
:- type non_finite_number_error
	--->	non_finite_number_error(string).
:- type object == map.map(string, json.value).
:- type output_style
	--->	compact 
	;	pretty .
:- type pointer.
:- type reader_params
	--->	reader_params((json.allow_comments) :: json.allow_comments, (json.allow_trailing_commas) :: json.allow_trailing_commas, (json.allow_repeated_members) :: json.allow_repeated_members, (json.allow_infinities) :: json.allow_infinities, (json.maximum_nesting_depth) :: json.maximum_nesting_depth).
:- type value
	--->	null 
	;	bool(bool.bool)
	;	string(string)
	;	number(float)
	;	object(json.object)
	;	array(json.array).
:- type writer_params
	--->	writer_params((json.output_style) :: json.output_style, (json.output_allow_infinities) :: json.allow_infinities, (json.output_member_filter) :: json.member_filter).
:- type error(Error)
	--->	stream_error(Error)
	;	json_error((json.error_context) :: json.context, (json.error_desc) :: json.error_desc).
:- type res(Error) == stream.res(json.error(Error)).
:- type reader(Stream).
:- type writer(Stream).
:- type maybe_partial_res(T, Error) == stream.maybe_partial_res(T, json.error(Error)).
:- type res(T, Error) == stream.res(T, json.error(Error)).
:- type result(T, Error) == stream.result(T, json.error(Error)).
:- inst (member_filter) == bound(member_filter((pred((builtin.in), (builtin.in)) is semidet)) ; no_member_filter).
:- inst (writer_params) == bound(writer_params(ground, ground, (json.member_filter))).
:- typeclass from_json(T).
:- typeclass to_json(T).
:- instance (json.from_json(bitmap.bitmap)).
:- instance (json.from_json(bool.bool)).
:- instance (json.from_json(calendar.date)).
:- instance (json.from_json(calendar.duration)).
:- instance (json.from_json(char.char)).
:- instance (json.from_json(integer.integer)).
:- instance (json.from_json(json.pointer)).
:- instance (json.from_json(json.value)).
:- instance (json.from_json(rational.rational)).
:- instance (json.from_json(unit.unit)).
:- instance (json.from_json(int)).
:- instance (json.from_json(float)).
:- instance (json.from_json(string)).
:- instance (json.to_json(bitmap.bitmap)).
:- instance (json.to_json(bool.bool)).
:- instance (json.to_json(calendar.date)).
:- instance (json.to_json(calendar.duration)).
:- instance (json.to_json(char.char)).
:- instance (json.to_json(integer.integer)).
:- instance (json.to_json(json.pointer)).
:- instance (json.to_json(json.value)).
:- instance (json.to_json(rational.rational)).
:- instance (json.to_json(unit.unit)).
:- instance (json.to_json(int)).
:- instance (json.to_json(float)).
:- instance (json.to_json(string)).
:- instance (json.from_json(array.array(T))) <= (json.from_json(T)).
:- instance (json.from_json(array2d.array2d(T))) <= (json.from_json(T)).
:- instance (json.from_json(bag.bag(T))) <= (json.from_json(T)).
:- instance (json.from_json(cord.cord(T))) <= (json.from_json(T)).
:- instance (json.from_json(digraph.digraph(T))) <= (json.from_json(T)).
:- instance (json.from_json(list.list(T))) <= (json.from_json(T)).
:- instance (json.from_json(maybe.maybe(T))) <= (json.from_json(T)).
:- instance (json.from_json(queue.queue(T))) <= (json.from_json(T)).
:- instance (json.from_json(set_bbbtree.set_bbbtree(T))) <= (json.from_json(T)).
:- instance (json.from_json(set_ctree234.set_ctree234(T))) <= (json.from_json(T)).
:- instance (json.from_json(set_ordlist.set_ordlist(T))) <= (json.from_json(T)).
:- instance (json.from_json(set_tree234.set_tree234(T))) <= (json.from_json(T)).
:- instance (json.from_json(set_unordlist.set_unordlist(T))) <= (json.from_json(T)).
:- instance (json.from_json(version_array.version_array(T))) <= (json.from_json(T)).
:- instance (json.from_json(bimap.bimap(K, V))) <= (json.from_json(K), json.from_json(V)).
:- instance (json.from_json(map.map(K, V))) <= (json.from_json(K), json.from_json(V)).
:- instance (json.from_json(maybe.maybe_error(T, E))) <= (json.from_json(T), json.from_json(E)).
:- instance (json.from_json(pair.pair(A, B))) <= (json.from_json(A), json.from_json(B)).
:- instance (json.from_json(pqueue.pqueue(K, V))) <= (json.from_json(K), json.from_json(V)).
:- instance (json.from_json(rbtree.rbtree(K, V))) <= (json.from_json(K), json.from_json(V)).
:- instance (json.to_json(array.array(T))) <= (json.to_json(T)).
:- instance (json.to_json(array2d.array2d(T))) <= (json.to_json(T)).
:- instance (json.to_json(bag.bag(T))) <= (json.to_json(T)).
:- instance (json.to_json(cord.cord(T))) <= (json.to_json(T)).
:- instance (json.to_json(digraph.digraph(T))) <= (json.to_json(T)).
:- instance (json.to_json(list.list(T))) <= (json.to_json(T)).
:- instance (json.to_json(maybe.maybe(T))) <= (json.to_json(T)).
:- instance (json.to_json(queue.queue(T))) <= (json.to_json(T)).
:- instance (json.to_json(set_bbbtree.set_bbbtree(T))) <= (json.to_json(T)).
:- instance (json.to_json(set_ctree234.set_ctree234(T))) <= (json.to_json(T)).
:- instance (json.to_json(set_ordlist.set_ordlist(T))) <= (json.to_json(T)).
:- instance (json.to_json(set_tree234.set_tree234(T))) <= (json.to_json(T)).
:- instance (json.to_json(set_unordlist.set_unordlist(T))) <= (json.to_json(T)).
:- instance (json.to_json(version_array.version_array(T))) <= (json.to_json(T)).
:- instance (json.to_json(bimap.bimap(K, V))) <= (json.to_json(K), json.to_json(V)).
:- instance (json.to_json(map.map(K, V))) <= (json.to_json(K), json.to_json(V)).
:- instance (json.to_json(maybe.maybe_error(T, E))) <= (json.to_json(T), json.to_json(E)).
:- instance (json.to_json(pair.pair(A, B))) <= (json.to_json(A), json.to_json(B)).
:- instance (json.to_json(pqueue.pqueue(K, V))) <= (json.to_json(K), json.to_json(V)).
:- instance (json.to_json(rbtree.rbtree(K, V))) <= (json.to_json(K), json.to_json(V)).
:- instance (stream.error(json.error(Error))) <= (stream.error(Error)).
:- instance (stream.input(json.reader(Stream), io.io)) <= (stream.input(Stream, io.io)).
:- instance (stream.reader(json.reader(Stream), json.value, io.io, json.error(Error))) <= (stream.line_oriented(Stream, io.io), stream.putback(Stream, char.char, io.io, Error)).
:- instance (stream.stream(json.reader(Stream), io.io)) <= (stream.stream(Stream, io.io)).
:- implementation.
:- include_module (json.char_buffer).
:- include_module (json.json_lexer).
:- include_module (json.json_parser).
:- include_module (json.marshal).
:- include_module (json.pointer).
:- include_module (json.string_reader).
:- include_module (json.unmarshal).
:- include_module (json.writer).
