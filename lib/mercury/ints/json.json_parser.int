:- module (json.json_parser).
:- interface.
:- type nesting_depth == int.
:- pred do_array_fold(json.reader(Stream), pred(json.value, A, A), A, json.maybe_partial_res(A, Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode do_array_fold((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode do_array_fold((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred do_array_fold_state(json.reader(Stream), pred(json.value, A, A, State, State), A, json.maybe_partial_res(A, Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode do_array_fold_state((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode do_array_fold_state((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred do_get_value(json.reader(Stream), json.json_parser.nesting_depth, json.json_lexer.token(Error), json.result(json.value, Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode do_get_value((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred do_object_fold(json.reader(Stream), pred(string, json.value, A, A), A, json.maybe_partial_res(A, Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode do_object_fold((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode do_object_fold((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred do_object_fold_state(json.reader(Stream), pred(string, json.value, A, A, State, State), A, json.maybe_partial_res(A, Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode do_object_fold_state((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode do_object_fold_state((builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred do_read_value(json.reader(Stream), json.json_lexer.token(Error), json.result(json.value, Error), State, State) <= (stream.line_oriented(Stream, State), stream.putback(Stream, char.char, State, Error)).
:- mode do_read_value((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
